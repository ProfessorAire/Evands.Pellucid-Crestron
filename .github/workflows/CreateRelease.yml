name: CreateRelease

on:
  workflow_dispatch:

jobs:
  getVersions:
    runs-on: self-hosted
    steps:
      - name: Get Versions
        run: |
          $versions = .\packaging\getVersions.ps1
          $libSemVer = $versions[0]
          $proSemVer = $versions[2]
          $preRelease = $versions[4]
          echo "VERSION=$libSemVer" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PRO_VERSION=$proSemVer" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PRE=$preRelease" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Check Version Tags
        uses: mukunku/tag-exists-action@v1.0.0
        id: contains_tag
        with:
          tag: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: "${{ secrets.RELEASE_TOKEN }}"

      - name: Validate Versions
        run: |
          if ("${{ steps.contains_tag.outputs.exists }}" -eq "true")
          {
            Write-Error "The tag 'v${{ env.VERSION }}' already exists."
            exit 1
          }    
    outputs:
      libVer: ${{ env.VERSION }}
      proVer: ${{ env.PRO_VERSION }}
      preRelease: ${{ env.PRE }}

  build:
    runs-on: self-hosted
    needs: getVersions
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build Project
        run: |
          .\scripts\buildProject.ps1 -Mode Release
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-output
          path: |
            .\src\Evands.Pellucid\bin\Release\Evands.Pellucid.dll
            .\src\Evands.Pellucid\bin\Release\Evands.Pellucid.xml
            .\src\Evands.Pellucid.Pro\bin\Release\Evands.Pellucid.Pro.dll
            .\src\Evands.Pellucid.Pro\bin\Release\Evands.Pellucid.Pro.xml
            .\src\Evands.Pellucid.ProDemo\bin\Release\Evands.Pellucid.ProDemo.cpz
  
  createPackages:
    runs-on: self-hosted
    needs: [build, getVersions]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-output
          path: .\src\
      
      - name: Create Packages
        run: |
          $paths = .\packaging\createPackages.ps1 ${{ needs.getVersions.outputs.libVer }} ${{ needs.getVersions.outputs.proVer }}
          $lib = $paths[0]
          $pro = $paths[1]
          $zip = $paths[2]
          echo "LIBPATH=$lib" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PROPATH=$pro" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "ZIPPATH=$zip" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
      - name: Upload Packages
        uses: actions/upload-artifact@v2
        with:
          name: package-output
          path: |
            {{ env.LIBPATH }}
            {{ env.PROPATH }}
            {{ env.ZIPPATH }}

  createRelease:
    runs-on: self-hosted
    needs: [createPackages, getVersions]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: CreateChangelog
        uses: AlexxNB/chalogen@v0.1.4
        with:
          title: "Evands.Pellucid-Crestron v${{ needs.getVersions.outputs.libVer }}"
          list: feat,fix,perf,docs,other
          version: true
          hide-title: true

      - name: Create Github Release
        uses: ncipollo/release-action@v1.8.6
        with:
          name: "Evands.Pellucid-Crestron v${{ needs.getVersions.outputs.libVer }}"
          tag: "v${{ needs.getVersions.outputs.libVer }}"
          artifactErrorsFailBuild: testResults
          prerelease: ${{ needs.getVersions.outputs.preRelease }}
          body: ${{ steps.CreateChangelog.outputs.changelog }}
          draft: true
          artifacts: ${{ env.ZIPPATH }}
        env:
          GITHUB_TOKEN ${{ secrets.RELEASE_TOKEN }}
      
      - name: Push Nuget Packages
        if: false
        uses: dansiegel/publish-nuget@v1.01
        with:
          filename: 'packaging\.releases\*.nupkg'
          apiKey: ${{ secrets.NUGET_API_KEY }}

  createVersionBadge:
    runs-on: self-hosted
    needs: [createRelease, getVersions]
    steps:
      - name: Create Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-Version.json
          label: Latest Package Version
          color: blue
          message: "Evands.Pellucid.${{ needs.getVersions.outputs.libVer }}/Evands.Pellucid.Pro${{ needs.getVersions.outputs.proVer }}"
          style: for-the-badge