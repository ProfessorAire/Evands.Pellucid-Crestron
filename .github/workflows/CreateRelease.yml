name: CreateRelease

on:
  workflow_dispatch:

jobs:
  getVersions:
    runs-on: self-hosted
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Get Versions
        run: |
          $versions = .\packaging\getVersions.ps1
          $libSemVer = $versions[0]
          $proSemVer = $versions[2]
          $preRelease = $versions[4]
          echo "VERSION=$libSemVer" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PRO_VERSION=$proSemVer" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PRE=$preRelease" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Check Version Tags
        uses: mukunku/tag-exists-action@v1.0.0
        id: contains_tag
        with:
          tag: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: "${{ secrets.RELEASE_TOKEN }}"

      - name: Validate Versions
        run: |
          if ("${{ steps.contains_tag.outputs.exists }}" -eq "true")
          {
            Write-Error "The tag 'v${{ env.VERSION }}' already exists."
            exit 1
          }    
    outputs:
      libVer: ${{ env.VERSION }}
      proVer: ${{ env.PRO_VERSION }}
      preRelease: ${{ env.PRE }}

  build-3:
    runs-on: self-hosted
    needs: getVersions
    steps:
      - name: Build 3-Series Project
        run: |
          .\scripts\buildProject.ps1 -Mode Release
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-output
          path: |
            .\src\Series3\Evands.Pellucid\bin\Release\Evands.Pellucid.dll
            .\src\Series3\Evands.Pellucid\bin\Release\Evands.Pellucid.xml
            .\src\Series3\Evands.Pellucid.Pro\bin\Release\Evands.Pellucid.Pro.dll
            .\src\Series3\Evands.Pellucid.Pro\bin\Release\Evands.Pellucid.Pro.xml
            .\src\Series3\Evands.Pellucid.ProDemo\bin\Release\Evands.Pellucid.ProDemo.cpz

  build-4:
    runs-on: self-hosted
    needs: getVersions
    steps:
      - name: Build 4-Series Project
        run: |
          .\scripts\buildProject4Series.ps1 -Mode Release

      - name: Upload Build Artifacts
        uses: actions/upload-artifacts@v2
        with:
          name: release-output
          path: |
            .\src\Series4\Evands.Pellucid\bin\Release\Evands.Pellucid.dll
            .\src\Series4\Evands.Pellucid\bin\Release\Evands.Pellucid.xml
            .\src\Series4\Evands.Pellucid.Pro\bin\Release\Evands.Pellucid.Pro.dll
            .\src\Series4\Evands.Pellucid.Pro\bin\Release\Evands.Pellucid.Pro.xml
  
  createPackages:
    runs-on: self-hosted
    needs: [build, getVersions]
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-output
          path: .\src\
      
      - name: Create Packages
        run: |
          $paths = .\packaging\createPackages.ps1 ${{ needs.getVersions.outputs.libVer }} ${{ needs.getVersions.outputs.proVer }}
          $lib = $paths[0]
          $pro = $paths[1]
          $zip = $paths[2]
          echo "LIBPATH=$lib" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PROPATH=$pro" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "ZIPPATH=$zip" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package-output
          path: |
            .\packaging\.releases\*.nupkg
            .\packaging\.releases\*.zip

  createRelease:
    runs-on: self-hosted
    needs: [createPackages, getVersions]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Download Package Artifacts
        uses: actions/download-artifact@v2
        with:
          name: package-output
          path: .\packaging\.releases\

      - name: CreateChangelog
        id: changelog
        run: |
          .\scripts\generateChangelog.ps1

      - name: Create Github Release
        uses: ncipollo/release-action@v1.8.6
        with:
          name: "Evands.Pellucid-Crestron v${{ needs.getVersions.outputs.libVer }}"
          tag: "v${{ needs.getVersions.outputs.libVer }}"
          artifactErrorsFailBuild: true
          prerelease: ${{ needs.getVersions.outputs.preRelease }}
          bodyFile: "changelog.md"
          draft: true
          artifacts: "./packaging/.releases/*.zip"
          commit: main
          token: ${{ secrets.RELEASE_TOKEN }}
      
      - name: Push Nuget Packages
        run:
          .\packaging\pushPackages.ps1 'packaging/.releases/*.nupkg' ${{ secrets.NUGET_API_KEY }}

  createVersionBadge:
    runs-on: self-hosted
    needs: [createRelease, getVersions]
    steps:
      - name: Create Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-Version.json
          label: Nuget
          color: blue
          message: "${{ needs.getVersions.outputs.libVer }}"
          style: flat