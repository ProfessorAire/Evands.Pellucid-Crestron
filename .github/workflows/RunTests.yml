name: RunTests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
      - 'packaging/*'
      - '.github/workflows/CreateRelease.yml'
      - 'scripts/*'
      - '*.md'
      - 'LICENSE'
      - 'Settings.StyleCop'
      - '.gitignore'
      - '*.png'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: self-hosted
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build Project
        run: |
          .\scripts\buildProject.ps1 -Mode Test

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: .\src\Evands.Pellucid.Tests\bin\Test\
  
  generateReport:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-output
          path: .\src\Evands.Pellucid.Tests\bin\Test\
      
      - name: Generate Coverage Report
        run: |
          .\testing\generateReport.ps1

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results
          path: |
            .\testing\coverage\index.html
            .\testing\testResults.trx
          
  validateCoverage:
    runs-on: self-hosted
    needs: generateReport
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Test Artifacts
        uses: actions/download-artifact@v2
        with:
          name: coverage-results
          path: .\testing

      - name: Get Coverage Info
        run: |
          $info = .\testing\getCoverageValues.ps1
          $cover = $info[0]
          $color = $info[1]
          echo "COVERAGE=$cover" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "COLOR=$color" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Get Test Results
        run: |
          $results = .\testing\getTestsResults.ps1
          $passed = $results[0]
          $errors = $results[1]
          $failed = $results[2]
          $color = $results[3]
          echo "PASSED=$passed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "ERRORS=$errors" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "FAILED=$failed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "TESTS_COLOR=$color" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
      - name: Create Coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-CodeCoverage.json
          label: Unit Test Coverage
          color: ${{ env.COLOR }}
          message: ${{ env.COVERAGE }}
          style: flat

      - name: Create Tests Badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-Tests.json
          label: Unit Tests
          color: ${{ env.TESTS_COLOR }}
          message: "${{ env.PASSED }} passing/${{ env.FAILED }} failing"
          style: flat
      
      - name: Check For Failure
        run: |
          if(${{ env.ERRORS }} -gt 0 -or ${{ env.FAILED }} -gt 0)
          {
            exit 1
          }
