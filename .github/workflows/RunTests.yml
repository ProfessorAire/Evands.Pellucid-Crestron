# This is a basic workflow to help you get started with Actions

name: RunTests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:
    branches: [ main ]
  release:
    types:
      - created

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: self-hosted
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build Project
        run: |
          .\scripts\buildProject.ps1 -Mode Test

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: |
            .\src\Evands.Pellucid\bin\Test\Evands.Pellucid.dll
            .\src\Evands.Pellucid.Pro\bin\Test\Evands.Pellucid.Pro.dll
            .\src\Evands.Pellucid.Tests\bin\Test\Evands.Pellucid.Tests.dll      
  
  generateReport:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-output
      - run: |
          .\testing\generateReport.ps1

      - name: Upload Test Artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: |
            .\testing\coverage\index.html
            .\testing\coverageResults.xml
          
  createCoverageBadges:
    runs-on: self-hosted
    needs: generateReport
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Test Artifacts
      - uses: actions/download-artifact@v2
        with:
          name: coverage

      - name: GetColor
        run: |
          $info = .\testing\getCoverageValues.ps1
          Write-Output "::set-env name=COLOR::$info[1]"
      
      - name: Create Coverage Badge
        uses: simon-k/dotnet-code-coverage-badge@v1.0.0
        id: create_coverage_badge
        with:
          label: Test Coverage
          color: env.COLOR
          path: .\$GITHUB_WORKSPACE\testing\coverageResults.xml
          gist-filename: Evands.Pellucid-CodeCoverage.json
          gist-id: 511fb463532b10f6fca3eba9df658486
          gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}
