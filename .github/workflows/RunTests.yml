# This is a basic workflow to help you get started with Actions

name: RunTests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:
    branches: [ main ]
  release:
    types:
      - created

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: self-hosted
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build Project
        run: |
          .\scripts\buildProject.ps1 -Mode Test

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: |
            .\src\Evands.Pellucid\bin\Test\Evands.Pellucid.dll
            .\src\Evands.Pellucid.Pro\bin\Test\Evands.Pellucid.Pro.dll
            .\src\Evands.Pellucid.Tests\bin\Test\Evands.Pellucid.Tests.dll      
  
  generateReport:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-output
      
      - name: Generate Coverage Report
        run: |
          .\testing\generateReport.ps1

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results
          path: |
            .\testing\coverage\index.html
            .\testing\testResults.trx
          
  createBadges:
    runs-on: self-hosted
    needs: generateReport
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Test Artifacts
        uses: actions/download-artifact@v2
        with:
          name: coverage-results
          path: ./testing/

      - name: Get Coverage Info
        run: |
          $info = .\testing\getCoverageValues.ps1
          echo "COVERAGE=$info[0]" >> $GITHUB_ENV
          echo "COLOR=$info[1]" >> $GITHUB_ENV

      - name: Get Test Results
        run: |
          $results = .\testing.getTestsResults.ps1
          echo "PASSED=$info[0]" >> $GITHUB_ENV
          echo "ERRORS=$info[1]" >> $GITHUB_ENV
          echo "FAILED=$info[2]" >> $GITHUB_ENV
          echo "TESTS_COLOR=$info[3]" >> $GITHUB_ENV
      
      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-CodeCoverage.json
          label: Unit Test Coverage
          color: ${{ env.COLOR }}
          message: ${{ env.COVERAGE }}
          style: for-the-badge

      - name: Create Tests Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-Tests.json
          label: Unit Tests
          color: ${{ env.TESTS_COLOR }}
          message: "${{ env.PASSED }} passing/${{ env.FAILED }} failing"
          style: for-the-badge
      
      - name: Check For Failure
        run: |
          if($ERRORS -gt 0 -or $FAILED -gt 0)
          {
            exit 1
          }
