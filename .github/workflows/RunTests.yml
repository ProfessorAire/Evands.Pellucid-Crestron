name: RunTests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
      - 'packaging/*'
      - '.github/workflows/CreateRelease.yml'
      - 'scripts/*'
      - '*.md'
      - 'LICENSE'
      - 'Settings.StyleCop'
      - '.gitignore'
      - '*.png'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-3:
    runs-on: self-hosted
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build Project
        run: |
          .\scripts\buildProject.ps1 -Mode Test -Series 3

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: |
            .\src\Series3\Evands.Pellucid.Tests\bin\Test\

  build-4:
    runs-on: self-hosted
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Build Project
        run: |
          .\scripts\buildProject.ps1 -Mode Test -Series 4

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: |
            .\src\Series4\Evands.Pellucid.Tests\bin\Test\

  generateReportSeries3:
    runs-on: self-hosted
    needs:
      - build-3
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-output
          path: .\src\Series3\Evands.Pellucid.Tests\bin\Test\
      
      - name: Generate Coverage Report
        run: |
          .\testing\generateReport.ps1 -Series 3

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results-3
          path: |
            .\testing\series3\coverage\index.html
            .\testing\series3\testResults.trx

  generateReportSeries4:
    runs-on: self-hosted
    needs: build-4
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-output
          path: .\src\Series4\Evands.Pellucid.Tests\bin\Test\
      
      - name: Generate Coverage Report
        run: |
          .\testing\generateReport.ps1 -Series 4

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results-4
          path: |
            .\testing\series4\coverage\index.html
            .\testing\series4\testResults.trx
          
  validateCoverage:
    runs-on: self-hosted
    needs:
      - generateReportSeries3
      - generateReportSeries4
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Test Artifacts Series 3
        uses: actions/download-artifact@v2
        with:
          name: coverage-results-3
          path:
            - .\testing\
      
      - name: Download Test Artifacts Series 4
        uses: actions/download-artifact@v2
        with:
          name: coverage-results-4
          path:
            - .\testing\

      - name: Get Coverage Info 3-Series
        run: |
          $info = .\testing\getCoverageValues.ps1 -Mode 3
          $cover = $info[0]
          $color = $info[1]
          echo "COVERAGE3=$cover" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "COLOR3=$color" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Get Coverage Info 4-Series
        run: |
          $info = .\testing\getCoverageValues.ps1 -Mode 4
          $cover = $info[0]
          $color = $info[1]
          echo "COVERAGE4=$cover" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "COLOR4=$color" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Get Test Results 3-Series
        run: |
          $results = .\testing\getTestsResults.ps1
          $passed = $results[0]
          $errors = $results[1]
          $failed = $results[2]
          $color = $results[3]
          echo "PASSED3=$passed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "ERRORS3=$errors" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "FAILED3=$failed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "TESTS_COLOR3=$color" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Get Test Results 4-Series
        run: |
          $results = .\testing\getTestsResults.ps1
          $passed = $results[0]
          $errors = $results[1]
          $failed = $results[2]
          $color = $results[3]
          echo "PASSED4=$passed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "ERRORS4=$errors" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "FAILED4=$failed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "TESTS_COLOR4=$color" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
      - name: Create Coverage Badge 3-Series
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-CodeCoverage.json
          label: Coverage 3-Series
          color: ${{ env.COLOR3 }}
          message: ${{ env.COVERAGE3 }}
          style: flat

      - name: Create Tests Badge 3-Series
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-Tests.json
          label: Tests 3-Series
          color: ${{ env.TESTS_COLOR3 }}
          message: "${{ env.PASSED3 }} passing/${{ env.FAILED3 }} failing"
          style: flat
      
      - name: Create Coverage Badge 4-Series
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-CodeCoverage4.json
          label: Coverage 4-Series
          color: ${{ env.COLOR4 }}
          message: ${{ env.COVERAGE4 }}
          style: flat

      - name: Create Tests Badge 4-Series
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gistID: 511fb463532b10f6fca3eba9df658486
          filename: Evands.Pellucid-Tests4.json
          label: Tests 4-Series
          color: ${{ env.TESTS_COLOR4 }}
          message: "${{ env.PASSED4 }} passing/${{ env.FAILED4 }} failing"
          style: flat
      
      - name: Check For Failure
        run: |
          if(${{ env.ERRORS }} -gt 0 -or ${{ env.FAILED }} -gt 0)
          {
            exit 1
          }
